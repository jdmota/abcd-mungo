plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.4.0"
    id "antlr"
    id "maven-publish"
    id "idea"
}

repositories {
    mavenCentral()
}

configurations {
    // for putting Error Prone javac in bootclasspath for running tests
    errorproneJavac

    // Do not include whole antlr tool in jar
    // https://github.com/gradle/gradle/issues/820#issuecomment-288838412
    compile {
        extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    }
}

sourceCompatibility = 1.8

ext {
    versions = [
        kotlin: "1.4.0",
        antlr4: "4.8",
        checkerFramework: "3.6.1",
        errorproneJavacVersion: "9+181-r4173-1",
        junit: "4.13",
    ]
}

generateGrammarSource {
    outputDirectory = new File("src/main/java")
}

// Generate parser, then compile with kotlin, and then with java

compileKotlin.dependsOn generateGrammarSource
compileJava.dependsOn compileKotlin

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        kotlin {
            srcDirs = ["src/main/java", "src/main/kotlin"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}

tasks.withType(JavaCompile) {
    classpath += files("build/classes/kotlin/main")
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"

    antlr "org.antlr:antlr4:${versions.antlr4}"
    compile "org.antlr:antlr4-runtime:${versions.antlr4}"

    implementation "org.checkerframework:checker:${versions.checkerFramework}"

    compileOnly "com.google.errorprone:javac:${versions.errorproneJavacVersion}"

    compile files("z3/bin/com.microsoft.z3.jar")

    // Testing
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"
    testImplementation "org.checkerframework:framework-test:${versions.checkerFramework}"

    errorproneJavac "com.google.errorprone:javac:${versions.errorproneJavacVersion}"
}

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task buildJar(type: Copy) {
    from jar
    into "examples"
}

tasks.withType(JavaCompile).all {
    options.compilerArgs.add("-Xlint:all")
}

// Add `mavenLocal()` in `repositories`, then run `./gradlew publishToMavenLocal`
// to publish your checker to your local Maven repository.
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'org.checkerframework'
            artifactId = 'mungo-checker'
            version = '0.1-SNAPSHOT'

            from components.java
        }
    }
}

test {
    testLogging.showStandardStreams = true

    inputs.files("tests")

    if (!JavaVersion.current().java9Compatible) {
        jvmArgs "-Xbootclasspath/p:${configurations.errorproneJavac.asPath}"
    }
}

clean.doFirst {
    delete "${rootDir}/tests/build/"
}
