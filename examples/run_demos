#!/bin/bash

CD=`pwd`

if [[ "$CD" =~ ^\/cygdrive.* ]]; then
	CD=`cygpath -w "$CD"`
fi

mungoJar="$CD/mungo-73dd8ae.jar"

javaTypestateChecker="$CD/../dist/jatyc.jar"
javaTypestateCheckerLib="$CD/../dist/jatyc-lib.jar"
javaTypestateCheckerClass="jatyc.JavaTypestateChecker"

checker="$CD/../dist/checker/checker.jar"

testsFolder="$CD/demos_fixed"
latexFolder="$testsFolder/_latex"

if [ ! -f "$checker" ]; then
  echo "Demo tests depend on the Checker Framework"
  echo "Did not find file $checker"
  exit 1
fi

tests=(
  "http"
)

mkdir -p "$latexFolder"

latexCode="\\\\lstset{language=,caption=\\\\textit{%s}}\n\\\\begin{code}\n%s\\\\end{code}\n\n"
latexJavaCode="\\\\lstset{language=Java,caption=\\\\textit{%s}}\n\\\\begin{code}\n%s\\\\end{code}\n\n"
latexOutput1="\\\\lstset{language=,caption=Mungo output}\n\\\\begin{code}\n%s\\\\end{code}\n\n"
latexOutput2="\\\\lstset{language=,caption=Java Typestate Checker output}\n\\\\begin{code}\n%s\\\\end{code}\n\n"

for testName in "${tests[@]}"
do
  cd "$testsFolder/$testName"
  echo "Running test: $testName"
  output1=`java -jar "$mungoJar" -classpath "$mungoJar;$javaTypestateCheckerLib" *.java 2>&1`
  output2=`java -jar "$checker" -classpath "$javaTypestateChecker" -processor "$javaTypestateCheckerClass" *.java 2>&1`

  printf "## Mungo's output\n\n\`\`\`\n%s\`\`\`\n\n" "$output1" > README.md
  printf "## Java Typestate Checker's output\n\n\`\`\`\n%s\`\`\`\n" "$output2" >> README.md

  latexFile="$latexFolder/$testName.tex"
  printf "" > "$latexFile"

  shopt -s nullglob
  for file in *.protocol
  do
    contents=`cat "$file"`
    printf "$latexCode" "$file" "$contents" >> "$latexFile"
  done

  shopt -s nullglob
  for file in *.java
  do
    contents=`cat "$file"`
    printf "$latexJavaCode" "$file" "$contents" >> "$latexFile"
  done

  if [[ "$output1" == "" ]]; then
    output1=$'None\n'
  fi

  if [[ "$output2" == "" ]]; then
    output2=$'None\n'
  fi

  printf "$latexOutput1" "$output1" >> "$latexFile"
  printf "$latexOutput2" "$output2" >> "$latexFile"

  cd "$CD"
done
